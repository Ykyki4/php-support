import textwrap

from django.utils.timezone import localtime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from . import start_tg_bot
from backend.views import get_customer_subscription, get_tariffs, create_request, get_customer_requests, \
        create_user, subscribe


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    subscription = await get_customer_subscription(update.effective_user.id)
    if subscription:
        context.user_data['subscription'] = subscription

        reply_text = textwrap.dedent(f'''
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.first_name}.\n
                –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {subscription['tariff']['title']}.
                –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {subscription['tariff']['max_month_requests'] - subscription['sent_requests']}.
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {subscription['tariff']['max_response_time']}—á.
                –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–∏—Ç—Å—è: {31 - (localtime() - subscription['created_at']).days}–¥.
                ''')

        reply_keyboard = [[InlineKeyboardButton('–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', callback_data="all_requests")]]

        if subscription['has_max_requests']:
            reply_text += "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫ –≤ –º–µ—Å—è—Ü –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ."
        else:
            reply_keyboard.append([InlineKeyboardButton('–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', callback_data="new_request")])

        await update.effective_chat.send_message(
            reply_text,
            reply_markup=InlineKeyboardMarkup(
                reply_keyboard
            ),
        )

        return start_tg_bot.HANDLE_EMPLOYER_MENU
    else:
        reply_text = textwrap.dedent('''
        –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å —É —Å–µ–±—è.\n\n
        –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:
        ''')

        reply_markup = []

        for tariff in await get_tariffs():
            reply_text += textwrap.dedent(f'''
            {tariff['title']} - {tariff['price']}‚ÇΩ –≤ –º–µ—Å—è—Ü \n
            –ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫ –≤ –º–µ—Å—è—Ü: {tariff['max_month_requests']}
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏: {tariff['max_response_time']}—á.\n
            ''')
            if tariff['extra']:
                reply_text += f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {tariff['extra']}\n\n"

            reply_markup.append(
                [InlineKeyboardButton(tariff['title'], callback_data=tariff['id'])]
            )

        reply_markup.append(
            [InlineKeyboardButton("–ù–∞–∑–∞–¥üîô", callback_data="back")],
        )

        await update.message.reply_text(
            reply_text,
            reply_markup=InlineKeyboardMarkup(reply_markup)
        )
        return start_tg_bot.HANDLE_USER_NOT_FOUND


async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.pre_checkout_query

    if query.invoice_payload != "Subscription-Payload":
        await query.answer(ok=False, error_message="Something went wrong...")
    else:
        await query.answer(ok=True)


async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    tariff_id = context.user_data['tariff_id']
    tg_user = update.effective_user

    await create_user(tg_user.id, tg_user.first_name)
    created = await subscribe(tg_user.id, tariff_id)
    if created:
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
        )
        return await start(update, context)
    else:
        await update.message.reply_text(
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return await start_tg_bot.start(update, context)


async def handle_make_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        await update.callback_query.message.delete()
        return await start(update, context)
    else:
        created = await create_request(update.effective_user.id, update.message.text)

        if created:
            subscription = context.user_data['subscription']
            await update.effective_chat.send_message(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏"
                f" {subscription['tariff']['max_response_time']}—á. –û–∂–∏–¥–∞–π—Ç–µ."
            )
            return await start(update, context)
        else:
            await update.effective_chat.send_message(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –∏–ª–∏ –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤."
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
            )
            return await start(update, context)


async def handle_show_all_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query.data == "back":
        await update.callback_query.message.delete()
        return await start(update, context)


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query.data == 'new_request':
        await update.callback_query.message.delete()
        await update.effective_chat.send_message(
            f"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º –±–æ—Ç—É, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )

        return start_tg_bot.HANDLE_MAKE_REQUEST

    elif update.callback_query.data == 'all_requests':
        reply_text = "–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:\n"

        for request in await get_customer_requests(update.effective_user.id):
            reply_text += textwrap.dedent(f'''
            –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {request['description']}
            –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞: {request['status']}
            ''')

        await update.callback_query.message.delete()
        await update.effective_chat.send_message(
            reply_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )
        return start_tg_bot.HANDLE_SHOW_ALL_EMPLOYER_REQUESTS

