import textwrap

from asgiref.sync import sync_to_async
from django.utils.timezone import localtime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

from . import start_tg_bot
from backend.models import Subscription, Tariff, Request, Customer


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user = await Customer.objects.aget(telegram_id=update.effective_user.id)
        subscription = await user.subscriptions.select_related('tariff').afirst()

        reply_text = textwrap.dedent(f'''
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.name}.\n
                –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {subscription.tariff.title}.
                –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {subscription.tariff.max_month_requests - subscription.sent_requests}.
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {subscription.tariff.max_response_time}—á.
                –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–∏—Ç—Å—è: {31 - (localtime() - subscription.created_at).days}–¥.
                ''')

        reply_keyboard = [['–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'], ['–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã']]

        await update.effective_chat.send_message(
            reply_text,
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                input_field_placeholder="–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ?"
            ),
        )

        return start_tg_bot.HANDLE_EMPLOYER_MENU

    except Customer.DoesNotExist:
        reply_text = textwrap.dedent('''
        –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å —É —Å–µ–±—è.\n\n
        –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:
        ''')

        reply_markup = []

        async for tariff in Tariff.objects.all():
            reply_text += textwrap.dedent(f'''
            {tariff.title} - {tariff.price}‚ÇΩ –≤ –º–µ—Å—è—Ü \n
            –ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫ –≤ –º–µ—Å—è—Ü: {tariff.max_month_requests}
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏: {tariff.max_response_time}—á.\n
            ''')
            if tariff.extra:
                reply_text += f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {tariff.extra}\n\n"

            reply_markup.append(
                [InlineKeyboardButton(tariff.title, callback_data=tariff.id)]
            )

        reply_markup.append(
            [InlineKeyboardButton("–ù–∞–∑–∞–¥üîô", callback_data="back")],
        )

        await update.message.reply_text(
            reply_text,
            reply_markup=InlineKeyboardMarkup(reply_markup)
        )
        return start_tg_bot.HANDLE_USER_NOT_FOUND


async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.pre_checkout_query

    if query.invoice_payload != "Subscription-Payload":
        await query.answer(ok=False, error_message="Something went wrong...")
    else:
        await query.answer(ok=True)


async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    tg_user = update.message.from_user
    user = await Customer.objects.acreate(
        telegram_id=tg_user.id,
        name=tg_user.first_name,
    )
    subscription = await Subscription.objects.acreate(user=user, tariff=context.user_data['tariff'])
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! {user.name}, —Ç–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.tariff.title}."
    )
    return await start(update, context)


async def handle_make_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        await update.callback_query.message.delete()
        return await start(update, context)
    else:
        user = await Customer.objects.aget(telegram_id=update.message.from_user.id)
        subscription = await user.subscriptions.select_related('tariff').afirst()

        await Request.objects.acreate(customer=user, description=update.message.text)

        subscription.sent_requests += 1
        await sync_to_async(subscription.save)()

        await update.message.reply_text(
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ {subscription.tariff.max_response_time}—á. –û–∂–∏–¥–∞–π—Ç–µ."
        )
        return await start(update, context)


async def handle_show_all_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query.data == "back":
        await update.callback_query.message.delete()
        return await start(update, context)


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å":
        user = await Customer.objects.aget(telegram_id=update.effective_user.id)
        subscription = await user.subscriptions.select_related('tariff').afirst()

        if subscription.sent_requests == subscription.tariff.max_month_requests:
            await update.effective_chat.send_message(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫ –≤ –º–µ—Å—è—Ü –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ."
            )
            return await start(update, context)

        await update.message.reply_text(
            f"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º –±–æ—Ç—É, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
                ])
            )

        return start_tg_bot.HANDLE_MAKE_REQUEST
    elif update.message.text == "–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã":
        reply_text = "–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:\n"

        user = await Customer.objects.aget(telegram_id=update.message.from_user.id)
        async for request in user.requests.all():
            reply_text += textwrap.dedent(f'''
            {request}
            –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å: {request.description}
            –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞: –°—Ç–∞—Ç—É—Å
            ''')

        await update.message.reply_text(
            reply_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )
        return start_tg_bot.HANDLE_SHOW_ALL_EMPLOYER_REQUESTS

